4.4 .NET Queue클래스

닷넷에서 큐를 지원하는 클래스로는 (1) Queue 요소들이 object 타입인 System.Collections.Queue 클래스와 (2) 개발자가 큐를 생성시 요소들의 데이타 타입을 결정할 수 있는 제네릭(Generic) 타입의 System.Collections.Generic.Queue<T> 클래스, 그리고 (3) 멀티쓰레딩 환경에서 Queue를 간편하게 사용할 수 있도록, .NET 4.0부터 제공된 ConcurrentQueue<T> 클래스가 있다.

닷넷의 Queue<T> 클래스와 Queue 클래스는 요소타입을 지정할 수 있는 Generic인가 아닌가하는 차이가 있으며, 두 클래스는 내부적으로 원형 동적 배열로 구현되어 있다.
즉, 이들 클래스는 원형 배열을 사용하여 Queue를 구현하였는데, Queue가 가득 찼을 때 2배의 원형 배열을 만들어 Queue를 확장하는 기능을 가지고 있다.
이들 Queue 클래스의 디폴트 성장인자(Growth factor)는 2.0으로서 배열 확장시 2배씩 확장해 나간다.

아래 예제는 Queue<T>를 사용하여 정수형 큐를 만들고 데이타를 추가하고 읽어내는 샘플 코드이다.

{
	Queue<int> q = new Queue<int>();
	q.Enqueue(1);
	q.Enqueue(2);
	q.Enqueue(3);
	
	// 하나를 Dequeue
	int data = q.Dequeue();
	Console.WriteLine(data;
	
	// 나머지 모두를 Dequeue
	foreach(var item in q)
	{
		Console.WriteLine(item);
	}
}

.NET 4.0부터 제공되는 ConcurrentQueue<T> 클래스는 System.Collections.Concurrent 네임스페이스에 있는 클래스로서 멀티쓰레드들이 큐에 동시에 데이타를 넣고 꺼낼 때 유용하게 사용될 수 있다.
Queue 클래스와 Queue<T> 클래스는 멀티쓰레딩 환경에서 안전하지 않기 때문에 개발자가 별도의 Locking 기능을 구현해 주어야 하는데 이 부분에서 종종 에러가 발생하곤 한다.
따라서, 멀티쓰레딩 환경에서는 이미 이러한 멀티쓰레딩 기능을 구현한 ConcurrentQueue<T> 클래스를 사용하는 것이 좋다.

ConcurrentQueue<T>는 내부적으로 작은 배열을 갖는 노드(주:Segment 라고함)들을 연결한 연결 리스트로 구현되어 있으며, 멀티쓰레드들이 동시에 엑세스할 때 필요한 Locking 매커니즘을 내부적으로 구현하고 있다.

아래 예제는 ConcurrentQueue<T>를 사용하여 하나의 쓰레드가 큐에 0부터 99까지 계속 집어 넣을 때, 동시에 다른 쓰레드에서 계속 큐에서 데이타를 빼내오는 작업을 수행하는 코드이다.

{
	// int 형 Concurrent Queue 생성
	var q = new ConcurrentQueue<int>();
	
	// item을 큐에 넣는 작업쓰레드
	Task tEnq = Task.Factory.StartNew(() =>
	{
		for(int i = 0; i < 100; i++)
		{
			q.Enqueue();
			Thread.Sleep(50);
		}
	});
	
	// item을 큐에서 꺼내는 작업쓰레드
	Task tDeq = Task.Factory.StartNew(() =>
	{
		int result;
		for(int i = 0; i < 100; i++)
		{
			if(q.TryDequeue(out result))
			{
				Console.WriteLine(result);
				Thread.Sleep(100);
			}
		}
	});
	
	// 두 쓰레드가 끝날 때까지 대기
	Task.WaitAll(tEnq, tDeq);
}