Queue(큐)는 선입선출(FIFO, First-In-First-Out) 원칙에 따라 원소를 저장하고 관리하는 선형 자료구조입니다. 
Queue는 주로 데이터의 처리 순서가 중요한 시나리오에서 사용됩니다.

Queue의 주요 연산과 시간 복잡도:

Enqueue (삽입):
	1. Queue의 뒤쪽에 원소를 추가합니다.
	2. 시간 복잡도: 𝑂(1)

Dequeue (삭제):
	1. Queue의 앞쪽에서 원소를 제거하고 반환합니다.
	2. 시간 복잡도: 𝑂(1)

Peek (조회):
	1. Queue의 앞쪽 원소를 조회합니다(제거하지 않고).
	2. 시간 복잡도: 𝑂(1)

Queue의 특징:
	1. 선입선출(FIFO): Queue는 원소가 들어온 순서대로 처리됩니다.
	2. 한 방향의 원소 접근: Queue는 한쪽 방향으로만 원소의 추가와 삭제가 가능합니다.
	3. 동기화: 멀티스레드 환경에서 안전하게 사용할 수 있는 동기화 메커니즘을 제공하는 경우가 있습니다(예: 동시성 환경에서의 큐).

Queue의 장단점:
	장점:
		1. 데이터 순서 보장 : 데이터가 들어온 순서대로 처리되기 때문에 순서가 중요한 작업에 적합합니다.
		2. 간단한 구조 : 구현이 간단하며, 기본 연산의 시간 복잡도가 𝑂(1)으로 효율적입니다.

	단점:
		1. 제한된 접근성: 특정 위치의 원소에 직접 접근하는 것이 불가능하며, 중간의 원소를 삭제하거나 수정하는 연산은 지원하지 않습니다.
		2. 정적 크기: 배열 기반의 Queue는 정적 크기로 인해 공간을 낭비할 수 있습니다. 
		   동적 크기 조절이 필요한 경우 배열 기반의 Queue는 추가적인 구현이 필요합니다.
		   Queue는 주로 네트워크 패킷 처리, 작업 스케줄링, 너비 우선 탐색(BFS) 등 다양한 애플리케이션에서 활용됩니다. 
		   작업의 처리 순서가 중요하거나, 데이터의 순서가 보장되어야 하는 경우 Queue는 매우 유용한 자료구조입니다.