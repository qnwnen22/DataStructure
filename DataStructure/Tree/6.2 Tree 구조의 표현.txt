6.2 Tree 구조의 표현

트리(Tree) 자료구조는 여러 방식으로 표현될 수 있는데, 여기서는 가장 일반적인 N-링크 표현법과 왼쪽자식-오른쪽형제 노드 표현법에 대해 살펴 본다.

N-링크 표현법(N-Link Expression)

N-링크 표현법은 트리 구조를 가장 직관적으로 표현한 방식으로, 각 노드에 최대 차수 N개 만큼의 링크를 두어 트리를 표현하는 방식이다.

트리 자료구조에서 임의의 한 노드는 트리의 차수(Tree Degree) 만큼의 링크를 가질 수 있다.
예를 들어, 아래 그림에서 트리의 최대 차수는 3이 되고, 이를 N-링크 표현법으로 표현하면 각 노드는 최대 3개의 링크를 가지게 된다.


				N-Link Expression
		
		
					 [   A   ]
					 [B][C][D]
			       ／    ｜    ＼
			[   B   ] [   C   ] [   D   ]
			[E][F][ ] [ ][ ][ ] [G][ ][ ]
			／	  ＼			   ＼
		[   E   ]	[   F   ]		[   G   ]
		[ ][ ][ ]	[ ][ ][ ]		[ ][ ][ ]



위 그림에서 노드 A의 경우 B,C,D 링크를 모두 가지고 있으며, 노드 B의 경우 자식노드인 E,F 에 대한 링크를 가지고 있다.
노드 D의 경우 G 노드 하나에 대한 링크를 가지게 되며, 노드 C,E,F,G의 경우 자식 노드가 없으므로 아무 링크도 가지지 않는다.

아래 예제는 위 그림에 있는 트리를 N-링크 표현법으로 간단하게 구현해 본 것 이다.
여기서는 트리 노드를 표현하는 TreeNode 클래스를 정의한 후, 루트 노드부터 자식노드들을 수동으로 링크하여 트리를 간단히 표현하였는데, 좀 더 나아가 Tree 클래스를 구현하여 필요한 메서드들을 정의할 수도 있다.

*Tree.TreeNode.cs 및 Tree.Example.cs Example1() 메서드 참조

N-링크 표현법은 트리 구조가 직관적이기 때문에 사용하기 쉽다는 장점이 있지만, 많은 노드가 최대 차수만큼 자식 노드들을 가지고 있는 것은 아니기 때문에 공간의 낭비가 심하다는 단점이 있다.
공간의 낭비를 어느 정도 해결하기 위해 위와 같이 고정 배열을 사용하는 것이 아니라 동적 배열을 사용할 수 있다.
아래는 위의 TreeNode 클래스를 동적 배열을 사용하는 클래스로 재정의한 예이다.

*Tree.TreeNode.cs 생성자 참조


왼쪽자식-오른쪽형제노드 표현법

왼쪽자식-오른쪽형제노드 표현법(Left Child Rigth Expression, LCRS)은 모든 노드에 링크를 2개씩 두고, 첫번째 링크는 자식노드를 가리키고, 두번째 링크는 자신의 오른쪽 형제노드를 가리키도록 표현한 방식이다.
노드의 링크가 2개로 고정되어 있기 때문에 N-링크 표현법보다 링크 관리가 간단한 편이다.

위의 N-링크 표현법에서 표현된 예제 트리를 LCRS로 다시 표현하면 아래와 같이 될 것이다.


					Left Child Right Sibling
		
		    (A)
		  ／ ｜ ＼
		 (B) (C) (D)			 [  A  ]
		／ ＼    ／				 [B] [ ]
		(E) (F) (G)			   ／
			 │			[  B  ] ─ [  C  ] ─ [  D  ]
			 └→		[E] [C]	   [ ] [D]    [G] [ ]
						／					   ｜
					[  E  ] ─ [  F  ]		  [  G  ]
					[ ] [F]	   [ ] [ ]		  [ ] [ ]



트리를 왼쪽자식-오른쪽형제노드 방식으로 표현하면, 데이타가 계속 늘어날 때에도 2개의 링크로 효과적으로 트리를 만들고 관리할 수 있다는 장점이 있다.
이 방식에서 부모가 가진 모든 자식들을 알아내기 위해서는 부모의 왼쪽 자식노드를 거쳐 계속 오른쪽 형제노드를 찾아가야 한다.

아래 예제는 위 그림에 있는 트리를 왼쪽자식-오른쪽형제노드 표현법으로 간단하게 구현해 본 것이다.
여기서는 일단 개념 정리를 위해 트리 노드를 표현하는 LCRSNode 클래스를 정의한 후, 루트 노드부터 자식노드들을 수동으로 연결하여 트리를 표현하였다.

*Tree.LCRSNode.cs, Tree.Example.cs Example2() 참조

이어서 위에서 정의한 LCRSNode 노드 클래스를 사용하여 더 나아가 LCRS 트리를 표현하기 위해 아래와 같이 LCRSTree 클래스를 구현할 수도 있다.
LCRSTree 클래스는 루트 필드와 LCRS 트리에서 사용하는 몇가지 메서드들을 정의하는데, 자식노드를 추가하는 AddChild() 메서드, 형제노드를 추가하는 AddSibling() 메서드,
그리고 트리를 출력해 보는 메서드를 정의하였다.
메서드들의 기본 로직은 아래와 같다.

 - AddChild(): 부모노드를 입력 파라미터로 받아들여 부모노드의 왼쪽자식 노드가 null 이면 왼쪽 노드에 추가하고, null이 아니면 왼쪽자식 노드에 있는 오른쪽 형제노드를 계속 따라가 마지막 형제노드 다음에 자식을 추가한다.

 - AddSibling(): 입력받은 노드의 으른쪽 형제노드를 계속 따라가 마지막 형제노드 다음에 노드를 추가한다.

 - PrintLevelOrder(): 레벨순으로 즉 위에서부터 가로방향으로 트리 노드를 출력하는 메서드이다.
					  각 레벨의 형제노드를 출력해 나가면서 혹시 그 형제노드 밑에 자식노드가 있으면 이를 큐에 넣어 둔다.
					  형제노드가 모두 출력되면(즉, 그 레벨에 대한 출력이 끝나면) 큐에서 자식 노드를 꺼내 그 자식의 형제노드를 위와 동일한 방식으로 처리한다.
					  
*Tree.LCRSTree.cs 및 AddChild(), AddBSibling() PrintLevelOrder(), PrintIndexTree() 메서드, Tree.Example.cs Example3() 메서드 참조

위 예제에서 PrintIndentTree()를 실행했을 때, 들여쓰기로 표현되는 LCRS 트리 출력은 다음과 같다.

	A
	  B
	    E
		F
	  C
	  D
	    G

일반 트리를 왼쪽자식-오른쪽형제노드 방식으로 표현하면 각 노드의 링크가 2개이므로, 이는 쉽게 다음 장에서 나오는 이진 트리로 변환할 수 있다.
이진 트리는 각 노드의 링크가 좌우 2개인 트리를 가리키는데, 구조상 여러 장점들을 갖기 때문에 가장 많이 사용되는 트리의 일종이다.