6.1 Tree 자료구조

지금까지 소개한 배열, 연결 리스트, 큐, 스택 등의 자료구조는 데이타가 선형적으로 나열되어 있는 선형적 자료구조(Linear Data Structure)이다.
트리(Tree) 혹은 다음에 소개되는 그래프(Graph)는 데이타가 선형적으로 나열되어 있지 않고 여러 노드들이 가지처럼 연결되어 있는 비선형적 자료구조 를 갖고 있다.
트리는 계층적인 자료를 표현하는 대표적인 자료구조로서, 가장 위에 루트(Root)로부터 출발하여 그 밑에 여러가지 자식 노드들을 가지는 구조를 가지고 있다.
트리 자료구조는 하나의 루트 노드애서 출발하며, 그 밑에 0개 이상의 자식노드를 가질 수 있으며, 그 자식노드 각각은 다시 자기 자신의 자식노드들을 가질 수 있다.
단, 트리 구조에서 하나의 자식은 2개 이상의 부모를 가질 수 없으며, 자식은 하나의 부모 노드만 가질 수 있다.

아래는 트리 구조의 일례를 선보인 것이다.

*이미지 참조

트리 구조에서 자주 사용되는 용어들을 살펴보면,

 - 루트(Root): 트리의 가장 꼭대기에 있는 노드
 - 간선(Edge): 두 노드를 잇는 링크
 - 자식(Child): 부모 노드 밑의 자식노드
 - 부모(Parent): 자식 노드 위에 연결된 부모 노드
 - 형제(Sibling): 부모가 같은 자식 노드들
 - 단말(Leaf): 트리에서 자식노드를 갖지 않는 하단의 노드
 - 높이(Height): 특정 노드에서 루트 사이의 길이(윗쪽 방향으로 계산)
 - 깊이(Depth): 루트 노드에서 특정 노드까지의 길이(아래쪽 방향으로 계산)
 - 트리 높이(Tree Height): 가장 먼 거리에 있는 리프 노드와 루트 사이의 길이
 - 트리 깊이(Tree Depth): 루트 노드에서 가장 먼 리프 노드까지의 길이
 - 레벨(Level): 루트 노드로부터의 수평적 깊이(루트노드 레벨=1)
 - 노드의 차수(Node Degree): 한 노드의 서브트리의 갯수. 자식 노드의 수와 동일.
 - 트리의 차수(Tree Degree): 트리 안 노드들의 차수 중 최대 차수

위 그림에 표현된 트리의 경우, 트리의 높이는 K 노드와 루트의 길이 즉 3이 되고, H 노드의 깊이는 루트와 H 노드 간의 길이 즉 2가된다.
노드 A는 루트 노드로서 레벨 1에  있는 노드이고, B,C,D는 레벨 2에 있는 노드들이다.
트리에서 가장 큰 차수는 A 노드 밑에 가장 많은 3개의 서브트리가 있으므로 3이 된다.
또한, 트리의 리프 노드로는 트리의 가장 말단에 자식노드를 갖지 않는 F,G,H,K 노드들이 있다.

트리 자료구조는 계층적인 데이타를 저장하는데 유용하게 사용된다.
예를 들어 회사나 기관의 조직도, 시/군/구 계층적 지역 데이타, 디렉토리/파일 시스템, 데이타베이스 인덱스 등의 흔히 트리 구조로 사용한다.