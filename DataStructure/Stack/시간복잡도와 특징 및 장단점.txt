Stack(스택)은 후입선출(LIFO, Last-In-First-Out) 원칙에 따라 원소를 저장하고 관리하는 선형 자료구조입니다. 
스택은 주로 재귀 알고리즘, 브라우저의 뒤로 가기 기능, 괄호 검사 등 다양한 애플리케이션에서 활용됩니다.

Stack의 주요 연산과 시간 복잡도:

Push (삽입):
	1. 스택의 맨 위(탑, Top)에 원소를 추가합니다.
	2. 시간 복잡도: 𝑂(1)

Pop (삭제):
	1. 스택의 맨 위 원소를 제거하고 반환합니다.
	2. 시간 복잡도: 𝑂(1)

Peek (조회):
	1. 스택의 맨 위 원소를 조회합니다(제거하지 않고).
	2. 시간 복잡도: 𝑂(1)

Stack의 특징:
	1. 후입선출(LIFO): 스택은 마지막에 삽입된 원소가 가장 먼저 삭제됩니다.
	2. 제한된 접근: 스택은 맨 위 원소에만 접근하거나 해당 원소를 삭제할 수 있습니다.
	3. 한 방향의 원소 접근: 스택은 한쪽 방향으로만 원소의 추가와 삭제가 가능합니다.

Stack의 장단점:
	장점:
		1. 간단한 구조: 스택의 구현이 간단하며, 기본 연산의 시간 복잡도가 𝑂(1)로 매우 효율적입니다.
		2. 후입선출 원칙: 후입선출 원칙이 유용한 경우(예: 함수 호출의 역추적, 괄호 검사 등)에 스택은 매우 유용합니다.

	단점:
		1. 제한된 기능: 스택은 맨 위 원소에만 접근이 가능하므로, 중간의 원소를 직접 접근하거나 수정하는 연산은 지원하지 않습니다.
		2. 공간 낭비: 배열 기반 스택은 정적 크기로 인해 공간을 낭비할 수 있습니다. 
		   동적 크기 조절이 필요한 경우 배열 기반 스택은 추가 구현이 필요합니다.
           Stack은 데이터의 삽입, 삭제 연산이 주로 상위에서 이루어지는 경우에 적합한 자료구조입니다. 
		   데이터의 순서가 역순으로 처리되어야 하는 상황에서는 스택이 효과적인 선택이 될 수 있습니다.