5.2 배열로 구현한 Stack

배열을 사용하여 스택을 구현하는 가장 단순한 구현은 고정된 배열을 할당하고 스택의 top 인덱스를 사용하여 데이타를 넣고 가져오는 것을 구현하는 방식이다.
스택에서 새 데이타 요소를 추가하는 것을 푸쉬(Push)라 하고, 가장 마지막에 추가된 요소를 제거하며 가져오는 것을 팝(Pop)이라 한다.
이 푸쉬와 팝 동작은 스택의 가장 기본적인 행위(메서드)에 해당된다.
구현 방식에 따라 약간 다를 수 있지만 통상 Push()메서드에서는 top인덱스를 하나 증가시킨 후 새 요소를 추가하고, Pop()메서드에서는 top 인덱스가 가리키는 위치에 요소 데이타를 가져오고 top 인덱스를 하나 감소시킨다.

아래는 배열을 사용하여 구현한 간단한 Stack 클래스에 대해 예제이다.

*Stack.StackUsingArray.cs 참조

위 메서드들의 주요 기능을 요약하면,
 
 - 생성자 : Stack 클래스 생성자에서는 먼저 지정된(혹은 디폴트) 크기의 배열을 생성하고 top 인덱스를 -1로 설정한다.

 - Push() : 새 요소를 추가하는 메서드로서, 먼저 스택이 가득 찬 상태인지 체크하고, 차지 않았으면 top 인덱스를 하나 증가시킨 후 새 요소를 추가한다.
 			만약 가득 찬 상태이면, Exception을 throw 하던지 현재 배열의 크기를 2배로 확대한 후 기존 요소들을 새 배열에 복사하여 스택 크기를 확장하는 방법을 사용할 수 있다.
			둘 중 어떤 방법을 선택하는가는 확장 기능을 구현할 것인지 말지에 달려 있다.

 - Pop() : 스택의 최상단 즉 top 인덱스 위치에서 한요소를 제거하면서 그 값을 리턴하는 메서드이다.
		   먼저 스택이 비어 있는지 체크하고, 비어있으면 메시지를 표시하거나 Exception을 throw한다.

 - Peek() : 스택의 최상단에 있는 요소를 제거하지 않으면서 그 데이타값만을 체크하기 위해 Peek()메서드를 사용한다.
			Pop() 메서드와 다른 점은 Peek()는 top 인덱스를 감소시키지 않아 현재 요소를 제거하지 않는다는 점이다.