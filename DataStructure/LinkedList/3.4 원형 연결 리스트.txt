3.4 원형 연결 리스트

원형 연결 리스트(Circular Linked List)는 환형 연결 리스트라고도 하는데, 일반 연결 리스트에서 마지막 노드를 처음 노드에 연결시켜 원형으로 만든 구조이다.
원형 연결 리스트를 단방향으로 연결한 것을 원형 단일 연결 리스트(Singly Circular Linked List)라 하고, 양방향으로 연결한 것을 원형 이중 연결 리스트(Doubly Circular Linked List)라 한다.

아래 그림은 4개의 노드를 갖는 원형 이중 연결 리스트를 포현한 예이다.
그림에서 보듯이, 첫 노드의 이전(Prev)노드는 마지막 노드를 가리키고, 마지막 노드의 다음(Next)노드는 첫 노드를 가리키고 있다.

		  Doubly Circular Linked List

	  ┌────────────────┐
	  ↓							    │
	┌ [ 1 ] ↔ [ 2 ] ↔ [ 3 ] ↔ [ 4 ] ┘
	│							    ↑
	└───────────────┘

원형 연결 리스트의 구현은 앞에서 소개한 단일 연결 리스트 혹은 이중 연결 리스트에서 처음과 마지막 노드를 서로 연결하는 것만을 추가해 주면 된다.
즉, 원형 단일 연결 리스트는 단일 연결리스트의 마지막 노드의 다음노드를 첫 노드를 가리키도록 하면 되고, 원형 이중 연결 리스트는 마지막 노드의 다음노드를 첫 노드를 가리키도록 함과 동시에 아래 예제는 원형 이중 연결 리스트를 간략히 구현해 본 것이다.

*LinkedList.CricularLinkedList.cs 및 Add(), AddAfter(), Remove(), GetNode(), Count() 메서드 참조

위 메서드들의 기능을 요약하면 아래와 같다.

 - Add() : 리스트가 비어 있으면 Head에 새 노드를 할당하고, 비어 있지 않으면 첫 노드의 이전노드인 마지막 노드를 찾고 첫노드와 마지막 노드 사이에 새 노드를 추가한다.
		   원형 이중 연결 리스트는 일반 이중 연결 리스트와 달리 마지막 노드를 찾기 위해 모든 노드를 순차적으로 이동할 필요가 없다.
		   워내하면, 첫 노드의 이전 노드가 항상 마지막 노드를 가리키고 있기 때문이다 바로 마지막 노드를 알아 낼 수 있기 때문이다.
		   
 - AddAfter() : 이는 이중 연결 리스트와 동일한 메서드이다. 
				단, 이중 연결 리스트는 마지막 노드 다음이 null이어서 current.Next.Prev문장에 대해 current.Next가 null 인지 먼저 체크해야 하지만, 원형 이중 연결 리스트는 마지막 노드 다음이 헤드이므로 별도로 null을 체크할 필요가 없다.
				
 - Remove() : 삭제할 노드가 첫 노드이고 전체 노드의 수가 하나이면, 헤드를 null로 설정한다.
			  이 경우가 아니면, 삭제할 노드의 이전 노드와 다음 노드를 서로 연결하는 작업을 진행하고, 삭제할 노드를 null로 설정한다.
			  
 - GetNode() : 이중 연결 리스트에서 특정 위치 인덱스에 있는 노드를 리턴한다.
			   리스트가 원형이므로 루프를 돌려 이동할 때 다시 순환해서 헤드로 돌아오면 찾는 노드가 없는 것이므로 null을 리턴한다.
			   
 - Count() : Head 부터 마지막 노드까지 이동하면서 카운트를 증가시킨다.
			 마지막 노드의 다음 노드로 이동하면 Head를 만나게 되므로 이러한 조건일 때 루프를 중지하면 된다.
			 
아래 예제는 위에서 구현한 원형 이중 연결 리스트의 기본 기능을 테스트 하기 위한 코드로, 원형 연결 리스트에 0,1,2,3,4 요소를 추가하고 중간의 2를 삭제하고 대신 100을 넣은 후 전체 리스트를 두번 출력해 본 것이다.
리스트가 원형이므로 전체 리스트 카운터의 2배 만큼 계속 이동하면 리스트를 두번 출력하게 된다.

*LinkedList.Example.cs Example3() 메서드 참조

원형 연결 리스트인지 체크

원형 연결 리스트에서 한가지 추가적으로 살펴 볼 만한 것은 어떤 연결 리스트가 원형 연결 리스트인지 아닌지를 구별해 내는 기능이다.
아래 예제는 리스트가 원형이 아닌자를 판별하는 코드로서 기본적으로 Head로부터 출발하여 계속 다음노드를 따라가면서 다시 Head로 돌아오면 그것은 원형 연결 리스트이고, 마지막에 null을 만나면 원형 연결 리스트가 아니라고 판단할 수 있다.
만약 연결 리스트가 빈 리스트(Empty List)이면, 그것은 원형 연결 리스트라고 정의한다.

*LinkedList.CricularLinkedList.cs IsCircular() 메서드 참조

연결 리스트 안의 Cycle 체크

위의 원형 연결 리스트 체크와 비슷한 것으로서, 어떤 연결 리스트 안에 Cycle이 있는지를 체크하는 문제를 살펴보자.
예를 들어, 아래 연결 리스트는 3-4-5-6 구간에서 사이클을 형성하고 있다. 물론 이 연결 리스트는 마지막 노드가 처음 노드를 가리키지 않기 때문에 원형 연결 리스트는 아니다.

	Cycle Detection in Linked List

		Head
	  ↙
	[ 1 ]→[ 2 ]→[ 3 ]→[ 4 ]
				   ↑      ↓
				  [ 6 ]→[ 5 ]

이렇게 중간에 있는 사이클 혹은 루프를 탐지하기 위해서는, Head에서 출발할 때 두개의 포인터를 사용해서 서로 다른 속도로 이동하면서 두 포인터가 만나는지 체크하면 된다.
예를들어, 첫번째 포인터는 한 노드씩 이동하고, 두번째 포인터는 두 노드씩 이동한다. 이때 만약 중간에 사이클이 있다면, 두 포인터는 서로 다른 속도로 이동하므로 결국에는 어느 싯점에 동일하게 만나게 된다. 
이는 마치 원형 운동장을 두명의 선수가 서로 다른 속도로 돌면 결국 한 지점에서 만나는 것과 같은 원리이다.
아래 예제는 이러한 사이클 탐지 방식을 간단히 구현해 본 코드이다.

*LinkedList.CricularLinkedList.cs IsCyclic() 참조