3.3 이중 연결 리스트

이중 연결 리스트(Doubly Linked List)는 단반향으로 연결된 단일 연ㄴ결 리스트의 탐색 기능을 개선한 것으로서 리스트 안의 노드가 이전 노드와 다음 노드를 가리키는 포인터를 모두 가지고 있어서 양방향으로 탐색이 가능한 자료구조이다.

예를 들어, 아래 그림은 4개의 노드를 갖는 이중 연결 리스트를 표현한 예이다.

*이미지 참조

이중 연결 리스트를 구현하기 위해서는 단일 연결 리스트와 비슷하게 먼저 노드를 표현하는 노드 클래스와 이를 연결한 리스트인 이중 연결 리스트 클래스를 만들면 된다.

이중 연결 리스트의 노드 클래스는 그 노드가 기본적으로 가지고 있는 데이타 필드와 이전 노드와 다음 노드를 가리키는 2개의 포인터(주: C#에서의 레퍼런스)를 가지고 있다.
C#으로 표현하면 아래와 같이 노드 클래스를 표현할 수 있는데, 단일 연결 리스트가 Next 레퍼런스만 가진 반면, 이중 연결 리스트는 Prev와 Next 레퍼런스를 가진다.

*LinkedList.DoublyLinkedListNode.cs 참조

이들 노드들을 양방향으로 연결한 이중 연결 리스트는 리스트의 처음을 가리키는 헤드(Head) 필드가 필요하고, 경우에 따라 마지막 노드를 가리키는 Tail 필드를 추가할 수 있다.

이중 연결 리스트 클래스의 기본적인 기능을 지원하기 위해 구현하는 메서드는 단일 연결 리스트와 비슷한데, 새 노드를 추가하는 Add() 메서드, 새 노드를 중간에 삽입하는 AddAfter() 메서드, 지정한 위치에 있는 노드를 반환하는 GetNode() 메서드, 그리고 특정 노드를 지우는 Remove() 메서드 등을 들 수 있다.

아래는 이러한 기본 메서드들을 구현한 간단한 이중 연결 리스트 예제이다.

*LinkedList.DoublyLinkedList.cs 참조

위 메서드들의 기능을 요약하면 아래와 같다.

 - Add() : 리스트가 비어 있으면 head에 새 노드를 할당하고, 비어 있지 않으면 마지막 노드를 찾아 이동한 후 마지막 노드 다음에 새 노드를 추가한다.

 - AddAfter() : 현재 노드를 A, 새로 추가하는 노드를 B, 현재 노드의 다음 노드를 C라고 가정 했을 때,
				A.Next 레퍼런스를 B에 연결하고, C.Prev 레퍼런스를 B에 연결하고, B의 Prev를 A에, B의 Next를 C에 연결한다.
				이렇게 각 노드의 이전 노드와 다음 노드 레퍼런스만 수정해 주기 때문에 이 메서드는 O(1)의 처리 시간을 갖는다.

 - Remove() : 삭제할 노드가 첫 노드이면, Head의 다음 노드 즉 두번쨰 노드를 Head에 할당하고, 첫 노드가 아니면 삭제할 노드의 이전 노드와 다음 노드를 서로 연결한다.
			  단일 연결 리스트와 달리 이중 연결 리스트는 이전노드를 가지고 있으므로, 삭제 시 이전 노드를 검색할 필요가 없이 즉시 이전 노드와 다음 노드를 연결할 수 있다. 
			  이 메서드는 O(1)의 처리 시간을 갖는다.

 - GetNode() : 이중 연결 리스트에서 특정 위치 인덱스에 있는 노드를 리턴한다.
			   만약 인덱스가 리스트 밖에 있으면, null을 리턴한다.
			   이중 연결 리스트는 해당 인덱스 만큼 계속 이동해서 노드를 찾아야 하므로 O(n)의 처리 시간을 갖는다.

 - Count() : Head부터 마지막 노드까지 이동하면서 카운트를 증가 시킨다. 역시 O(n)의 처리 시간을 갖는다.
 
아래 예제는 위에서 구현한 이중 연결 리스트의 기본 기능을 테스트 하기 위한 코드로, 이중 연결 리스트에 0,1,2,3,4 요소를 추가하고 중간의 2를 삭제하고 대신 100을 넣은 후 전체 리스트를 순방향과 역방향으로 출력하는 것 이다.

*LinkedList.Example.cs Example2() 참조