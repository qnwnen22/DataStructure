3.2 단일 연결 리스트

단일 연결 리스트는 단뱡향으로 노드들이 연결한 간단한 자료구조이다.
아래는 4개의 노드를 갖는 단일 연결 리스트를 표현한 예이다.

*이미지 참조

단일 연결 리스트를 구현하기 위해서는 먼저 노드를 표현하는 노드 클래스와 이를 연결한 리스트인 링크드 리스트 클래스를 만들면 된다.
단일 연결 리스트의 노드 클래스는 그 노드가 기본적으로 가지고 있는 데이타 필드와 다음 노드를 가리키는 포인터를 가지고 있다.
C#으로 아래와 같이 간단한 노드 클래스를 표현할 수 있다.

*LinkedList.SinglyLinkedListNode.cs 참조

이들 노드들을 단방향으로 연결한 단일 연결 리스트 클래스는 리스트의 첫 노드를 가리키는 헤드(Head) 필드를 가지게 되는데, 이 헤드를 사용하여 전체 리스트를 순차적으로 엑세스하게 된다.

단일 연결 리스트 클래스는 리스트의 기본적인 기능을 지원하기 위해서 새 노드를 추가하는 Add()메서드, 새 노드를 중간에 삽입하는 AddAfter()메서드, 지정한 위치에 있는 노드를 반환하는 GetNode()메서드, 그리고 특정 노드를 지우는 Remove()메서드 등을 구현할 수 있다.
아래는 이러한 기본 메서드들을 구현한 간단한 단일 연결 리스트 클래스 예제이다.

*LinkedList.SinglyLinkedListNode.cs 참조

위 메서드들의 기능을 요약하면 아래와 같다.

 - Add(newNode)메서드 : 리스트가 비어 있으면 Head에 새 노드를 할당하고, 비어 있지 않으면 마지막 노드를 찾아 이동한 후 마지막 노드 다음에 새 노드를 추가한다.
 (주:만약 위에 SinglyLinkedList클래스에서 Head와 함께 Tail필드를 추가하고 마지막 노드를 Tail 필드에 저장한다면, Add 메서드에서 새 노드를 추가할 때 Tail이 가리키는 마지막 노드 다음에 직접 새 노드를 추가할 있다.

 - AddAfter(currNode, newNode)메서드 : 새 노드의 Next에 현재 노드의 Next를 먼저 할당하고, 현재 노드의 Next에 새노드를 할당한다.
 
 - Remove(removeNode)메서드 : 삭제할 노드가 첫 노드이면, Head의 다음노드 즉 두번째 노드를 Head에 할당하고, 첫 노드가 아니면 해당노드를 검색하여 삭제한다.
							  해당 노드를 검색할 때,단일 연결 리스트는 단방향으로 연결되어 있으므로 삭제할 노드의 바로 이전 노드를 찾아서 삭제 노드를 지워야 한다.
							  즉, 이전 노드에 Next에 삭제노드의 Next를 할당해야 지울 수 있다.
							  (주: 여기서 Remove() 메서드의 한 변형으로 RemoveAfter(previousNode) 와 같은 메서드를 작성한다면 이미 삭제한 노드의 이전 노드를 이미 알고 있으므로 삭제는 포인터만 변경해 주면 될 것이다.
 
 - GetNode(index) 메서드 : 단일 연결 리스트에서 특정 위치 인덱스에 있는 노드를 리턴한다.
						   만약 인덱스가 연결리스트 범위를 벗어나면 null을 리턴한다.
						   배열은 인덱스를 통해 즉시 배열요소를 찾을 수 있지만(즉, O(1)의 검색 성능), 
						   링크드 리스트는 해당 인덱스 만큼 계속 이동해서 노드를 찾아야 하므로 O(n)의 검색 시간을 갖는다.
 
 - Count() 메서드 : Head 부터 마지막 노드까지 이동하면서 카운트를 증가시킨다.
 
위에서 구현한 단일 연결 리스트의 기본 기능을 테스트 하기 위하여, 아래 예제는 단일 연결 리스트에 0,1,2,3,4 요소를 추가하고, 중간의 2를 삭제하고 대신 100을 넣은 후, 리스트 전체를 출력하는 것을 테스트한 코드이다.

*LinkedList.Example.cs Example1() 참조