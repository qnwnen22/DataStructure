LinkedList(연결 리스트)는 노드(Node)들이 포인터(pointer)로 연결된 선형 데이터 구조입니다. 
LinkedList는 특히 삽입과 삭제 연산이 빈번하게 발생하는 상황에서 유용한 자료구조입니다. 
다만, 특정 위치의 원소에 빠르게 접근하는 것은 배열(Array)보다 비효율적일 수 있습니다.

LinkedList의 주요 연산과 시간 복잡도:
원소 접근 (Access):
특정 인덱스의 원소에 접근하려면 처음부터 해당 인덱스까지 순회해야 합니다.
시간 복잡도: 평균 𝑂(𝑛), 최악의 경우 𝑂(𝑛)

원소 삽입 (Insert):
특정 위치에 원소를 삽입할 때는 삽입 위치까지 순회해야 하며, 새로운 노드를 추가한 후 연결을 업데이트해야 합니다.
시간 복잡도: 평균 𝑂(1) (헤드 또는 테일에 삽입), 최악의 경우 𝑂(𝑛) (중간에 삽입)

원소 삭제 (Delete):
특정 위치의 원소를 삭제하려면 삭제 위치까지 순회해야 하며, 연결을 업데이트해야 합니다.
시간 복잡도: 평균 𝑂(1) (헤드 또는 테일 삭제), 최악의 경우 𝑂(𝑛) (중간에서 삭제)

원소 탐색 (Search):
특정 값을 찾기 위해 모든 노드를 순회해야 합니다.
시간 복잡도: 평균 𝑂(𝑛), 최악의 경우 𝑂(𝑛)

LinkedList는 삽입과 삭제가 𝑂(1)의 시간 복잡도로 수행될 수 있지만, 특정 위치의 원소에 빠르게 접근하거나 탐색하는 것은 비효율적입니다. 
따라서, 데이터의 삽입과 삭제가 빈번하게 발생하는 상황에서는 LinkedList가 유용할 수 있습니다. 
하지만, 원소의 접근이나 검색이 빈번하게 이루어지는 경우에는 배열이나 해시 테이블 등 다른 자료구조를 고려해야 할 수 있습니다.