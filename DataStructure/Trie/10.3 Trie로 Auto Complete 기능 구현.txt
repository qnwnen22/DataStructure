10.3 Trie로 Auto Complete 기능 구현

지금까지 소개한 Trie를 기반으로 Auto Complete 기능을 구현해 보자.
Auto Complete 기능은 사용자가 지금까지 타이핑한 내용을 기반으로 사전이나 데이타베이스에서 그 문자열로 시작되는 단어들을 보여주는 기능이다.
예를 들어, 사전이 "프로", "프로그램", "프로그래밍", "프랑스" 라는 단어가 정의되어 있을 때, 사용자가 "프로그" 라고 치면, "프로그램" 과 "프로그래밍" 이라는 단어 리스트를 표시해 주는 것이다.

Auto Complete 기능을 구현하기 위해서 AutoComplete() 메서드는 List<string> AutoComplete(string prefix) 와 같이 prefix 문자열을 받아 들이고, 단어 리스트를 리턴하게 한다.
AutoComplete() 메서드의 기본 로직은 먼저 루트로부터 prefix 문자열까지의 노드로 이동한 후, 이동한 노드를 기준으로 하는 서브트리를 전위순회하면서 단어 끝으로 표시된 노드인 경우 해당 단어를 결과 리스트에 저장한다.

아래 예제는 위에서 소개한 Trie 클래스 안에 AutoComplete() 메서드를 추가해서 Auto Complete 기능을 구현한 예이다.
AutoComplete() 메서드는 Prefix 노드까지 이동한 후 그 노드부터 Preorder()를 호출한다.
Preorder() 메서드는 노드가 단어 끝으로 표시된 노드인지 체크해서 리스트에 추가한 후 그 노드의 자식노드들(Children)에 대해 다시 순서대로 Preorder()를 재귀 호출 한다.

*Trie.Trie.cs AutoComplete() 메서드 참조

위 예제는 노드간 링크들로부터 단어를 조합하였는데, 단어가 끝나는 노드에 실재 그 단어를 넣어 두면 루트부터 그 노드까지의 단어를 쉽게 알 수 있다.
이를 위해 아래와 같이 Node 클래스에서 단어 문자열을 갖는 Word 속성을 추가할 수 있다.
사실 이 Word 속성이 null 인지 아닌지에 따라 단어 끝인지도 판별할 수 있을 것이므로 EndOfWord 속성을 생략할 수도 있다.

*Trie.Node.cs 참조

위와 같이 약간 변형된 Node 클래스를 사용하면, 완성된 단어를 좀 더 쉽게 가져올 수 있는 AutoComplete() 메서드를 아래와 같이 구현할 수 있다.

*Trie.Trie2.cs 참조