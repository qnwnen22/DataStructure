10.1 Trie 자료구조

Trie는 reTrieval 이라는 단어의 중간 부분을 따온 것으로 Tree와 구분되게 "트라이"라고 발음한다.
트라이는 흔히 Prefix Tree 혹은 Radix Tree라고도 불리우는 정렬된 트리 구조로서 문자열 자동 완성(Auto Complete)이나 스펠링 체크(Spell Checking) 기능 등에서 문자열을 빠르게 인출하는데 유용하게 사용된다.

Trie는 주로 문자열을 키로 사용하는데, 이진 탐색 트리의  경우 각 노드가 키값을 가지고 있어 검색에서 이 노드의 키값을 비교하는 반면 Trie는 문자열 안에 있는 문자 하나 하나가 노드의 링크로 표현되는 트리 구조를 갖는다.
예를 들어 "cat"이라는 단어는 루트노드에서 "c"를 가리키는 자식노드에 연결되고, 다시 "c"노드에서 "a"를 가리키는 자식노드에 연결되고, 계속해서 "a"노드에서 "t"를 가리키는 자식노드에 연결된다.
즉, 이진탐색트리는 한 노드에서 "cat"이라는 문자열을 저장하지만, Trie는 빈 노드인 루트를 포함하여 4개의 노드에 걸쳐 'c','a','t'를 저장한다.

트라이가 26개의 알파벳 문자만을 저장한다고 가정했을 때, 트라이의 노드에 26개의 자식노드 링크를 갖는 배열을 정의하고, 알파벳의 상대적 위치를 찾아 자식노드를 연결할 수 있다.
위의 예에서처럼, 트라이에 "cat"을 저장한다면 루트노드는 배열의 세번째 요소에 'c' 자식노드를 연결하고, 'c' 자식노드에서는 그 배열의 첫번째 요소에 'a' 자식노드를 연결하게 된다.
이러한 방식으로 "cat"을 저장한 후 다시 "cam" 이라는 문자열을 추가한다면, "ca" 는 이미 링크가 연결되어 있으므로 'a' 노드로부터 'm' 만 연결하면 된다.
cat과 cam의 경우 이렇게 ca라는 앞부분(Prefix)을 공유하게 되는데, 이러한 의미에서 Trie를  Prefix Trie라고 부른다.

아래 그림은 몇 개의 단어 (cat,cam,tea,tee,team)를 트라이로 표현한 예이다.
트라이에서 문자열은 루트부터 리프 노드까지 연결되어 표현되지만, 아래 그림에서 tea 문자열과 같이 내부 노드에서 문자열이 완성되는 경우도 있다.
어떤 노드가 문자열의 끝인지를 표현하기 위해, 트라이 노드에서 완성된 문자열인지를 표현하는 Flag 필드를 두거나 노드에 완성된 문자열 자체를 저장하는 등의 방법을 사용할 수 있다.

					  Trie
			
					 (    )
				  c ／	  ＼ t
				 (   )	    (   )
			   a ／	        e ／
			   (   )        (   )
			m ／   ＼ t  a ／   ＼ e
			(cam)  (cat) (tea)  (tee)
						m ／
						(team)

문자열 검색의 성능은 이진 탐색 트리의 경우 전체 노드수가 N이고 트리 내 최대 문자열의 길이가 M 일 때 O(M*log(N))으로 표현할 수 있지만, 트라이의 경우 O(M)의 시간 복잡성을 가지게 된다.
다만, 트라이의 경우 상대적으로 링크를 저장하는 배열 혹은 해시테이블의 공간이 크게 증가하게 된다.