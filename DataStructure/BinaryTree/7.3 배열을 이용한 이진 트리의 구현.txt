7.3 배열을 이용한 이진 트리의 구현

배열을 이용하여 이진 트리를 구현하는 방식은 여러 가지 계산을 필요로 하기 때문에 연결리스트 방식보다 약건 복잡하다고 느낄 수 있지만, 힙과 같은 일부 응용 분야에서는 배열로 구현하는 것이 편리하다.

배열에 이진 트리를 저장하는 방식은 기본적으로 트리 레벨 순으로 왼쪽에서 오른쪽으로 저장하면 된다.
즉, 배열 A의 A[0]에는 루트노드를, A[1]에는 루트의 왼쪽 자식노드를, A[2]에는 루트의 오른쪽 자식노드를 저장한다.
이어 다시 A[3],A[4]에는 A[1]의 자식노드들을 저장하고, A[5],A[6]에는 A[2]의 자식노드들을 저장한다.
고정 배열의 경우, 만약 노드가 없으면 해당 배열 요소를 비워 둔다.

아래 그림은 6개의 노드를 갖는 이진 트리를 배열에 저장한 예이다.

*이미지 참조

이진 트리의 노드들을 체계적으로 배열에 저장하기 때문에, 임의의 노드 즉 임의의 배열 요소 인덱스 i 에서 좌/우 자식노드의 위치는 다음과 같이 계산할 수 있다.

 왼쪽 노드 = 2 * i + 1
 오른쪽 노드 = 2 * i + 2

또한 임의의 배열 요소 인덱스 i 에서 부모노드의 위치는 다음과 같이 계산할 수 있다.

 부모 노드 = (i - 1) / 2

배열로 구현된 이진 트리에서는 이러한 계산을 통해 임의의 노드를 직접 엑세스할 수 있기 때문에 검색 및 추가/삭제에서 O(1)의 시간 복잡도를 갖게 된다.
하지만, 좌우에 비어 있는 노드들이 많은 트리의 경우, 배열에서 사용하지 않는 공간이 늘어난다는 단점이 있다.
예를 들어, 한쪽 방향으로만 기운 사향이진트리를 배열로 저장하면 배열 공간 활용도가 현저하게 낮아지게 된다.
반면, 데이타가 순차적으로 채워져 있는 완전 이진트리의 경우는 거의 모든 배열 공간을 활용하기 때문에 배열로 구현하는 방식이 효율적이다.

아래 예제는 배열을 이용하여 이진 트리를 간단히 구현해 본 코드로서, 임의의 부모노드에서 좌우 자식노드의 데이타를 읽거나 쓰는 메서드(GetLeft, SetLeft 등)와 임의의 노드의 부모 노드 데이타를 가져오는 메서드 (GetParent)등을 구현하였다.

*BinaryTree.BinaryTreeUsingArray.cs, BinaryTree.Exmaple.cs Exmaple2() 참조

참고로 닷넷프레임워크는 트리와 마찬가지로 이진 트리 자료구조를 구현한 클래스를 제공하지 않고 있다.