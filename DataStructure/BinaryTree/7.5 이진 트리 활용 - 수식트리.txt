7.5 이진 트리 활용 - 수식트리

이진 트리는 여러 다양한 분야에 활용되는데, 수식 처리에도 이진 트리를 활용할 수 있다.
수식트리(Expression Tree)는 수식 계산을 위한 이진 트리로서 루트노드와 내부 노드에는 연산자(Operator)가 있고, 단말(Leaf)노드에는 피연산자(Operand가 있도록 구성된다.

예를 들어, 10 / 4 + 4 * 5 라는 식을 수식트리로 표시하면 아래와 같다.


		   Expressin Tree
		
		( 10 / 4 ) + ( 3 * 5 )

			   ( + )
			 ／    ＼
		  ( / )		 ( * )	
		 ／	 ＼		／	 ＼
	  ( 10 ) ( 4 )( 3 ) ( 5 )	

	  Postfix: 10 4 / 3 5 * +
	 

그림에서 보듯이, 수식트리의 단말노드에는 피연산자가 있으며, 루트를 비롯한 내부 노드에는 연산자들로 구성되어 있다.


수식트리 구축

수식으로부터 이진트리를 만들기 위해서흔 보통 후위표기로 된 수식을 사용하여 수식트리를 생성한다.
수식트리를 만드는 기본적인 로직은 다음과 같다.

 - 후위표기로 된 수식 토큰의 끝에서부터 역순으로 토큰을 읽어 나간다.
 - 토큰이 연산자이고 다음 2개의 토큰이 피연산자이면, 연사자를 가진 노드를 만들고 그 오른쪽 자식과 왼쪽 자식에 2개의 피연사자 단말노드를 각각 연결한다.
 - 토튼이 연산자이고 다음 2개의 토큰 중 하나 혹은 둘 다 연산자일 수 있다.
   토큰이 연산자(a)이고 다음 토큰이 다시 연산자(b)이면, 먼저 연산자(a)를 가진 노드를 만들고 그 오른쪽 자식에 연산자(b)를 루트로 보고 생성한 서브트리를 연결한다.
   만약 다음 토큰이 피연산자이면 서브트리 대신 단말(Leaf)노드를 만들어 오른쪽 자식에 연결한다.

아래는 위와 같은 로직을 사용하여 수식트리를 구축하는 예제이다.

*BinaryTree.ExpressionTree.cs 및 Build() 메서드 참조


수식트리 계산

수식트리를 구축한 후 이 트리로부터 수식 연산을 수행할 수 있다.
수식트리는 이진트리이므로 루트를 기준으로 왼쪽 서브트리와 오른쪽 서브트리로 나눌 수 있다.
따라서, 왼쪽 서브트리를 계산한 결과와 오른쪽 서브트리 계산한 결과가 재귀호출로 구한 후, 이를 루트 연산자를 사용하여 최종 결과를 구하면 된다.

아래는 재귀호출을 사용하여 수식트리를 계산하는 예제이다.

*BinaryTree.ExpressionTree.cs Evaluate() 참조


수식트리 순회

수식트리는 이진트리와 동일한 방식으로 순회한다.
수식트리를 전위순회(Preorder Traversal)하면 전위표기(Prefix Notation)로 된 수식을 산출할 수 있고, 중위순회(Inorder Traversal)를 하면 보통 우리가 사용하는 중위표기(Infix Notation)로 된 수식을 산출한다.
마찬가지로 후휘순회(Postorder Traversal)를 하면 컴퓨터에서 사용하는 후위표기(Postfix Notation) 수식을 산출할 수 있다.

특히, 중위표기에서는 괄호를 넣을 필요가 있으므로, 수식트리를 중위순회할 때 루트 혹은 서브트리의 루트가 연산자인지 체크해서 연산자이면 처음에 "(" 을 넣고, 마지막에 ")"을 넣어준다.

아래는 지금까지 설명한 수식트리 전체에 대한 예제인데, 중간 부분에 Inorder(), Postorder() 메서드가 수식트리 순회와 관련된 코드이다.

*BinaryTree.ExpressionTree.cs 및 Inorder(), Postorder(), IsOperator() 메서드, BinaryTree.Example.cs 및 Example3() 메서드 참조
