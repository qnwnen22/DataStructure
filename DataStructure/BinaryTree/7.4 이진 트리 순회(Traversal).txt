7.4 이진 트리 순회(Traversal)

트리 순회는 트리 구조에서 각 노드를 정확히 한 번만 체계적인 방법으로 방문하는 과정을 말한다.
배열이나 연결 리스트와 같은 성형 자료 구조에서는 보통 한 가지의 논리적인 순회 방법이 존재하지만, 트리나 그래프 같은 구조에서는 많은 순회 방법이 존재한다.

일반적으로 트리를 순회하는 방법으로는 전위 순회(Preorder Traversal), 중위 순회(Inorder Traversal), 후외 순회(Postorder Traversal), 레벨 순회 순회(Level-order Traversal) 등이 사용된다.

전위 순회는 루트 노드에서 시작해서

 1. 노드를 방문한다.
 2. 왼쪽 서브트리를 전위 순회한다.
 3. 오른쪽 서브트리를 전위 순회한다.
 
준위 순회는 순서를 조금 바꿔서 (1)왼쪽 서브트리를 중쉰 순회 (2) 노드 방문 (3) 오른쪽 서브트리를 중위 순회한다.

후쉬 순회는 (1) 왼쪽 서브트리를 후위 순회 (2) 오른쪽 서브트리를 후위 순회 (3) 노드르 방문하는 순이다.

레벨 순서 순회는 낮은 레벨부터 높은 레벨로 각 레벨을 차례대로 순회한다.

예를 들어, 아래 그림과 같은 이진 트리를 위 4가지 방식으로 순회하면 아래 표와 같은 결과가 나온다.

*이미지 참조

재귀(Recursive) 방식으로 구현한 이진트리 순회

트리 순회는 재귀(Recursive) 호출 혹은 비재귀 반복(Iterative) 방식을 통해 구현할 수 있는데, 재귀 호출로 구현하는 것이 비교적 쉽다.
위의 "연결리스트를 이용한 이진 트리의 구현" 에서 이미 재귀적 전위 순회를 소개하였는데, 비슷한 방식으로 아래와 같이 전위,중위,후위 순회를 구현할 수 있다.

*BinaryTree.BinaryTree.cs 참조

반복(Iterative)방식으로 구현한 이진 트리 순회

반복 방식으로 전위, 중위, 후휘 순회를 구현하기 위해서 보통 스택을 사용하는데, 스택에 나중에 처리할 노드들을 저장해 두었다가 다시 꺼내서 사용하게 된다.

전위 순위를 스택을 사용해서 구현하는 기본 로직은 다음과 같다.

 - 루트 노드를 스택에 넣는다.
 - 스택이 빌 때까지 루프를 돈다
	- 스택에서 Pop하여 노드를 출력한다
	- 오른쪽 노드가 있으면 스택에 저장한다
	- 왼쪽 노드가 있으면  스택에 저장한다

아래 예제는 전위 순회를 스택에 사용하여 구현한 예이다.

*BinaryTree.BinaryTree.cs PreorderIterative() 참조

중위 순회를 스택에 사용하여 구현하는 기본 로직은 다음과 같다.

 - 루트 노드에서 최좌측(Leftmost) 노드까지 스택에 저장한다.
 - 스택이 빌 때까지 루프를 돈다.
	- 스택에서 Pop하여 노드를 출력한다.
	- 오른쪽 노드가 있으면 오른쪽 노드부터 오른쪽 서브트리의 최좌측 노드까지 스택에 저장한다.

아래 예제는 중위 순회를 스택을 사용하여 구현한 예로서 위의 기본 로직을 최적화 없이 그대로 구현해 본 것이다.

*BinaryTree.BinaryTree.cs InorderIterative() 참조

위의 중위 순회 예제에서 최좌측 노드까지 스택에 저장하는 부분이 중복되어 있으므로 이러한 중복을 없애고 약간의 최적화를 진행한 코드는 아래와 같다.

*BinaryTree.BinaryTree.cs InorderIterative2() 참조

후위 순회를 스택을 사용하여 구현하는 기본 로직은 다음과 같다.

 - 루트 노드에서 최좌측 노드까지 오른쪽 자식노드와 루트 노드를 스택에 저장한다.
 - 스택이 빌 때까지 루프를 돈다.
	- 스택에 Pop하여 변수 N에 저장하고, N의 오른쪽 노드가 스택에 Top과 동일한지 체크한다.
	- 동일하지 않으면, 변수 N을 출력한다.
	- 만약 동일하면, 스택에 루트와 오른쪽 노드가 있었다는 의미이다.
	  스택의 Top에 있는 오른쪽 노드를 Pop하고 기존 루트(변수 N)를 다시 스택에 Push 한다.
	  다시 말하면, 스택에 처음 Push할 때 오른쪽 자식노드와 루트 순으로 Push 하였으므로 Pop할 때 루트부터 Pop할 수 있게 되고 이를 통해 스택 상에 루트와 오른쪽 자식 노드가 있는지 판단할 수 있게 된다.
	  이를 통해 오른쪽 서브트리를 처리해야 한다는 것을 판단한 이후에 다시 루트노드를 스택에 Push 하고 오른쪽 서브트리를 처리한다.
	  오른쪽 서브트리를 처리하기 위해서는 다시 오른쪽 서브트리의 루트 노드에서 최좌측 노드까지 오른쪽 자식노드와 루트노드를 스택에 저장하여 동일한 방식으로 반복하여 처리하면 된다.

아래 예제는 후위 순회를 스택을 사횽하여 구현한 예로서 위의 기본 로직을 최적화 없이 그대로 구현해 본 것이다.

*BinaryTree.BinaryTree.cs PostorderIterrative() 참조

위의 예제에서 최좌측 노드까지 스택에 저장하는 부분이 중복되어 있으므로 이러한 중복을 없애고 약간의 최적화를 진행한 코드는 아래와 같다.

*BinaryTree.BinaryTree.cs PostorderIterrative2() 참조

레벨 순서 순회

레벨 순서 순회(Level-order)는 큐를 사용하여 구현하는데, 처음 루트를 큐에 넣은 후 큐에서 하나씩 꺼내 노드를 방문하고 바로 자식노드를 다시 큐에 넣는다.
이러한 방식으로 큐에서 부모 노드를 가져오고 그 자식노드를 큐에 넣으면서 레벨 순서로 노드들을 순회할 수 있다.
아래 코드는 이러한 레벨 순서 순회를 예시한 것이다.

*BinaryTree.BinaryTree.cs LevelorderTraversal() 참조

위의 레벨 순서 순회 코드를 실행하면 출력은 "A B C D E F"이 되는데, 만약 각 레벨별로 한 라인씩 출력하려면 아래와 같이 약간의 수정이 필요하다.
수정된 부분은 각 레벨의 마지막 부분에 "레벨끝"을 표시하는 마크를 큐에 추가하고, 나중에 큐에서 이 레벨끝 마크를 꺼낼 때 새라인으로 이동하고(만약 큐에 데이타가 남아 있으면) 큐에 마지막에 "레벨끝" 마크를 다시 추가하는 것이다.

*BinaryTree.BinaryTree.cs LevelorderNewLine() 참조

위 코드를 실행하면 아래와 같이 출력된다.

A
B C
D E F