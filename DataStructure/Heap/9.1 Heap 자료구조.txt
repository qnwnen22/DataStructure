9.1 Heap 자료구조

힙은 힙 속성(Heap Property)를 만족하는 트리 기반의 자료구조 이다.
힙 속성에 따르면 부모 노드와 자식 노드간의 순서(대소관계)는 일정해야 하고, 형제노드들 간의 순서는 상관이 없다.
부모 노드가 자식 노드보다 항상 크거나 같은 경우를 최대 힙(Max Heap)이라 하고, 부모 노드가 자식 노드보다 항상 작거나 같은 경우를 최소 힙(Min Heap)이라 한다.

Heap은 Binary Heap을 비롯하여 Binomial Heap, Leftist Heap, 2-3 Heap, Fibonacci Heap 등의 다양한 변형들로 구현할 수 있는데, 일반적으로 완전 이진 트리(Complete Binary Tree) 구조를 갖는 Binary Heap을 사용하여 구현한다.
아래 그림은 완전 이진 트리 구조를 갖는 최소 힙(Min Heap)과 최대 힙(Max Heap)을 예시한 것이다.


	  Min Heap			  Max Heap

		( 1 )				( 9 )
	   ／   ＼		  	   ／   ＼
    ( 5 )	( 7 )		 ( 7 )	( 5 )
   ／   ＼			    ／   ＼
 ( 6 )  ( 9 )		  ( 1 )  ( 6 )


기본적으로 Heap은 최소값 혹은 최대값을 빠르게 가져오기 위해 고안된 자료구조이다.
최소값을 가져오는 최소 힙(Min Heap) 트리에서 부모 노드는 항상 자식노드보다 작거나 같지만, 형제노드 사이에서는 아무런 대소 관꼐가 정해져 있지 않다.
따라서, Heap은 완전히 정렬된 자료구조가 아니며, 부모 자식 간에만 부분적으로 정렬된 자료구조라 할 수 있다.

최소 힙(Min Heap)의 루트에는 항상 최소값이 있게 되고, 마찬가지로 최대 힙(Max Heap)의 루트에는 항상 최대값이 있게 되는데, 이러한 성질을 이용하여 Heap은 우선순위 큐(Priority Queue)를 구현하는데 흔히 사용한다.

우선순위 큐(Priority Queue)는 추상적 자료형(Abstract Data Type)으로서 일반적인 Queue 기능에 우선순위 기능을 추가한 것이다.
즉, 각 요소는 우선순위(Priority)를 가지며 높은 우선순위를 갖는 요소가 낮은 우선순위를 갖는 요소보다 먼저 처리되는 기능을 갖는 것이다.
우선순위 큐는 Heap을 사용하는 것이 가장 효율적이기 때문에 대부분 Heap을 사용하여 구현하지만, 배열이나 연결 리스트 등의 다른 방식을  사용하여 구현할 수도 있다.