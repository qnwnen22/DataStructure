9.힙(Heap)

9.1 Heap 자료구조

힙은 힙 속성(Heap Property)를 만족하는 트리 기반의 자료구조 이다.
힙 속성에 따르면 부모 노드와 자식 노드간의 순서(대소관계)는 일정해야 하고, 형제노드들 간의 순서는 상관이 없다.
부모 노드가 자식 노드보다 항상 크거나 같은 경우를 최대 힙(Max Heap)이라 하고, 부모 노드가 자식 노드보다 항상 작거나 같은 경우를 최소 힙(Min Heap)이라 한다.

Heap은 Binary Heap을 비롯하여 Binomial Heap, Leftist Heap, 2-3 Heap, Fibonacci Heap 등의 다양한 변형들로 구현할 수 있는데, 일반적으로 완전 이진 트리(Complete Binary Tree) 구조를 갖는 Binary Heap을 사용하여 구현한다.
아래 그림은 완전 이진 트리 구조를 갖는 최소 힙(Min Heap)과 최대 힙(Max Heap)을 예시한 것이다.

*이미지 참조

기본적으로 힙은 최소값 혹은 최대값을 빠르게 가져오기 위해 고안된 자료구조이다.
최소값을 가져오는 최소 힙 트리에서 부모 노드는 항상 자식노드보다 작거나 같지만, 형제노드 사이에서는 아무런 대소 관꼐가 정해져 있지 않다.
따라서, 힙은 완전히 정렬된 자료구조가 아니며, 부모 자식 간에만 부분적으로 정렬된 자료구조라 할 수 있다.

최소 힙의 루트에는 항상 최소값이 있게 되고, 마찬가지로 최대 힙의 루트에는 항상 최대값이 있게 되는데, 이러한 성질을 이용하여 힙은 우선순위 큐를 구현하는데 흔히 사용한다.

우선순위 큐는 추상적 차료형으로서 일반적인 큐 기능에 우선순위 기능을 추가한 것이다.
즉, 각 요소는 우선순위를 가지며 높은 우선순위를 갖는 요소가 낮은 우선순위를 갖는 요소보다 먼저 처리되는 기능을 갖는 것이다.
우선순위 큐는 힙을 사용하는 것이 가장 효율적이기 때문에 대부분 힙을 사용하여 구현하지만, 배열이나 연결 리스트 등의 다른 방식을  사용하여 구현할 수도 있다.


9.2 Heap 구현

힙은 한번에 하나씩 루트 노드로 부터 최대값 혹은 최소값을 가져오는 기능이 가장 핵심적인 기능이다.
힙을 구현하는 Heap클래스의 주요 메서드로는 데이타를 추가하는 Add() 메서드와 루트 노드에서 데이타를 꺼내고 트리르 재정렬하는 Remove() 메서드가 있다.
Remvoe() 메서드를 여러 번 호출하면, 완전히 정렬되어 있지 않은 자료 구조로부터 Top N 개의 최대값(혹은 최소값)을 가져오는 효과를 갖게 된다.

Heap 클래스를 구현하기 위해서는 노드간 링크를 연결한 이진트리를 사용할 수도 있지만, 일반적으로 배열을 사용하면 더 적은 공간으로 효율적으로 Heap을 구현할 수 있다.
배열을 사용하여 완전 이진트리를구현하면 링크를 위한 공간이 필요 없게 되고, 부모 자식 간의 관게를 인덱스 계산을 통해 구할 수 있다.
Heap 이진트리를 레벨 순서(Level order)로 순회하면 Heap 배열로 쉽게 만들 수 있다.

Heap의 Add() 메서드

Heap을 구현할 때 배열을 사용하는 큰 장점 중의 하나는 새 요소를 배열의 마지막에 바로 추가할 수 있다는 점이다.
즉, 연결리스트를 사용하는 이진트리는 새 요소를 추가하는 마지막 위치를 검색해야 하는 반면, 배열을 사용하는 완전이진트리는 마지막 위치에 바로 추가할 수 있어 O(1)의 시간 복잡성을 갖는다.

힙에 새로운 요소가 추가되거나 제거되면 힙 속성이 유지되지 않을 수 있으므로 요소를 위아래로 옮겨 힙 속성을 유지하도록 해야 한다.
힙 속성을 유지하는 이러한 이동은 부모/자식 간의 직계에서만 일어나므로 O(log N)의 시간 복잡성을 갖는다.

힙에서 새로운 요소를 추가하는 Add()메서드는 다음과 같은 로직을 갖는다.
아래 로직은 Max Heap에 대한 것이지만, Min Heap도 부모 자식간 크기 비교만 다를 뿐 동일한 로직을 사용한다.

 - 새 요소를 배열 마지막에 추가한다. 추가된 요소가 현재노드가 된다.
 - 현재노드가 루트에 도달할 때까지 루프를 돈다
	- 현재 노드가 부모 노드보다 크면 둘을 서로 교체한다. 부모노드를 현재노드로 놓고 계속 루프를 돈다.
	  즉, 부모, 조부모 등으로 계속 직계 조상들을 비교하게 된다.
	- 현재 노드가 부모 노드보다 작거나 같으면 루프를 빠져나온다.
	
아래 그림은 Max Heap에 새로운 요소를 추가하는 과정을 표현한 것이다.
스탭1은 새 요소 17을 배열 마지막에 추가하는 것이고, 스탭2는 추가된 17과 그 부모 10을 교환하는 과정이며, 스탭3는 다시 15와 17을 교환하는 과정이다.

*이미지 참조

Heap의 Remove() 메서드

힙의 루트 노드에서 최대값(혹은 최소값)을 꺼내는 Remove() 메서드는 루트가 제거된 후 배열의 마지막 요소를 루트로 옮기고 다시 힙 속성을 유지하는 작업을 진행한다.

최대 힙의 경우 루트에서 최대값을 꺼낸 후 힙의 마지막 요소를 루트로 옮기면 루트에 새값이 들어 왔기 때문에 힙 속성을 유지하는 작업이 필요해 진다.
즉, 루트노드와 자식노드 중 더 큰 값을 갖는 자식노드를 서로 비교해서 만약 루트가 그 자식노드보다 작으면 두 요소를 교체한다.
교체된 자식노드는 다시 그 자손과 비교해 가면서 하향으로 교체를 계속해 나간다.

힙에서 루트를 제거하는 Remvoe() 메서드는 다음과 같은 로직으로 구현할 수 있다.
아래 로직은 Max Heap에 대핞 것이지만, Min Heap도 부모 자식간의 크기 비교만 다를 뿐 동일한 로직을 사용한다.

 - Heap의 최대값인 루트값을 저장한다.
 - 배열의 마지막 요소를 루트에 옮기고 마지막 요소를 제거한다.
 - 루트를 현재 노드로 설정한다.
 - 현재 노드가 Leaf 노드에 도달할 때까지 루프를 돈다.
	- 현재 노드의 왼쪽 노드와 오른쪽 노드 중 큰 쪽 자식 노드를 선택한다.
	- 현재 노드가 자식 노드보다 작으면 서로 교체한다. 교체 후 자식노드를 현재 노드로 설정하고 계속 루프를 돈다.
	- 현재 노드가 자식 노드보다 크거나 같으면 루프를 빠져나온다.
 - 처음 저장해 두었던 루트값을 리턴한다

아래 그림은 Max Heap에 루트를 제거하는 과정을 표현한 것이다.
스탭1은 루트를 제거하고 마지막 요소를 루트로 옮기는 것이고, 스랩2는 루트에 있는 10과 왼쪽 자식노드인 17을 교환하는 과정이며, 스탭3는 다시 10와 오른쪽 자식 노드인 15를 교환하는 과정이다.

*이미지 참조

Max Heap 클래스 소스코드

아래 예제는 위에서 설명한 기본 로직을 구현한 것으로 동적 배열을 사용하여 최대 힙을 구현한 MaxHeap 클래스이다.
예제에서 MaxHeap 클래스는 동적 배열 타입으로 .NET에서 제공하는 List<T> 클래스를 사용하였고, 코드를 단순화하기 위해 배열이 int 데이타 타입을 갖는다고 가정하였다.

*Heap.MaxHeap.cs 참조

