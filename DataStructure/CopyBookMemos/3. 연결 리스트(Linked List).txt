3.1 연결 리스트의 기초개념

연결 리스트(Linked List)는 각 노드가 데이터와 포인터를 가지고 있으면서 노드들이 한 줄로 쭉 연결되어 있는 방식으로 데이터를 저장하는 자료구조이다.
노드들이 한 방향으로 각 노드가 다음 노드를 가리키고 있는 리스트를 단일 연결 리스트(Singly Linked List)라 하고,
각 노드가 이전 노드와 다음 노드를 모두 가리키는 양방향 노드로 되어 있는 것을 이중 연결 리스트(Doubly Linked List)라 한다.


3.2 단일 연결 리스트

단일 연결 리스트는 단뱡향으로 노드들이 연결한 간단한 자료구조이다.
아래는 4개의 노드를 갖는 단일 연결 리스트를 표현한 예이다.

*16p 이미지 참조

단일 연결 리스트를 구현하기 위해서는 먼저 노드를 표현하는 노드 클래스와 이를 연결한 리스트인 링크드 리스트 클래스를 만들면 된다.
단일 연결 리스트의 노드 클래스는 그 노드가 기본적으로 가지고 있는 데이타 필드와 다음 노드를 가리키는 포인터를 가지고 있다.
C#으로 아래와 같이 간단한 노드 클래스를 표현할 수 있다.

*LinkedList.SinglyLinkedListNode.cs 참조

이들 노드들을 단방향으로 연결한 단일 연결 리스트 클래스는 리스트의 첫 노드를 가리키는 헤드(Head) 필드를 가지게 되는데,
이 헤드를 사용하여 전체 리스트를 순차적으로 엑세스하게 된다.

단일 연결 리스트 클래스는 리스트의 기본적인 기능을 지원하기 위해서 새 노드를 추가하는 Add()메서드, 새 노드를 중간에 삽입하는 AddAfter()메서드, 지정한 위치에 있는 노드를 반환하는 GetNode()메서드,
그리고 특정 노드를 지우는 Remove()메서드 등을 구현할 수 있다.
아래는 이러한 기본 메서드들을 구현한 간단한 단일 연결 리스트 클래스 예제이다.

*LinkedList.SinglyLinkedListNode.cs 참조

위 메서드들의 기능을 요약하면 아래와 같다.

 - Add(newNode)메서드 : 리스트가 비어 있으면 Head에 새 노드를 할당하고, 비어 있지 않으면 마지막 노드를 찾아 이동한 후 마지막 노드 다음에 새 노드를 추가한다.
 (주:만약 위에 SinglyLinkedList클래스에서 Head와 함께 Tail필드를 추가하고 