4. 큐(Queue)

큐는 도착한 순서대로 데이타를 꺼내서 사용하는 선형적인 자료구조이다.
큐는 흔히 FIFO(First In First Out)이라고 불리우는 자료구조로서 먼저 저장된 것이 먼저 꺼내지는 선입선출 구조를 가지고 있다.
만약 즉시 처리하지 않아도 되는 일이라면, 큐에 차례로 넣어 두고 순서대로 그 일들을 처리할 때 큐를 사용하곤 한다.

*이미지 참조

큐는, 위 그림에서 보듯이, 뒤(리어,Rear)에서 데이타를 추가하고 앞(프론트,Front)에서 데이타를 읽는 구조를 갖는다.
큐는 흔히 배열(Array)이나 연결 리스트(Linked List)를 사용하여 구현하곤 한다.

4.2 배열로 구현한 Queue

고정 배열을 사용한 Queue구현

배열을 사용하며 큐를 구현하기 가장 산순한 구현은 고정된 배열을 할당하고 프론트나 리어 인덱스를 관리하면서 큐를 구현하는 방식이다.
배열에 새 데이타를 추가할 때는 리어 인덱스가 가리키는 배열요소에 데이타를 넣고, 데이타를 읽으며 제거할 때는 프론트 인덱스가 있는 배열요소를 제거한다.

프론트에서 배열요소를 제거할 때는 프론트 인덱스를 프론트 다음 요소로 이동하는 방식을 사용하거나 또는 모든 배열요소를 프론트 앞으로 땡겨 옮기는 방식을 사용할 수 있다.

첫번째 방식은 리어 인덱스가 고정 배열 크기만큼 이동하면 더 이상 큐에 데이타를 넣을 수 없으며, 프론트 인덱스가 계속 이동하여 최대 고정 배열 크기만큼만 이동할 수 있다.
즉, 큐에 저장할 수 있는 최대 데이타수가 배열 크기와 같게 된다.

두번째 방식, 즉 프론트가 제거될 때마다 배열요소를 모두 앞으로 땡기는 방식은 제거된 요소들만큼 계속 데이타를 넣을 수 있는 장점이 있지만 큐에서 데이타를 꺼낼 때마다
배열요소들을 모두 옮겨야 하기 때문에 성능면에서 좋지 않은 방식이다.

고정 배열로 큐를 구현할 때 발생하는 이러한 문제들은 아래 소개하는 원형 배열을 이용함으로써 해결될 수 있다.