11.2 해시 함수

해시테이블에서 해싱은 기본적으로 입력된 Key/Value 들을 Bucket 배열에 골고루 분산시키는 것을 그 목표로 한다.
해싱은 개념적으로 해시 함수로부터 리턴된 해시값을 Bucket 배열 크기로 나눈 나머지를 구하는 과정으로 구현되는데, 이러한 과정을 통해 Key는 그에 상응하는 Bucket 인덱스를 가리키게 된다.

hash = hashFunc(key);
index = hash % bucketSize;

해시 함수는 Key에 상응하는 해시값을 리턴하는 함수로서 기본적으로 입력 값에 대해 균일 분포(Uniform distribution)된 해시값을 리턴해야 한다.
만약 해시 함수가 균일하게 분포되지 않은 해시값을 리턴하게 되면, 해시 충돌이 일어날 가능성이 높아지고 따라서 전반적인 해시테이블의 성능이 저하되게 한다.

해시 함수에서 문자열은 ASCII 혹은 유니코드 코드포인트를 사용하여 숫자로 변화하여 처리하는데, 모든 코드포인트를 더하거나 자릿수마다 가중치를 두고 더하는 등 여러 방법을 사용할 수 있다.
해시 함수에는 다양한 종류의 함수들이 나와 있는데, 간단한 해시 함수 몇가지를 소개하면 다음과 같다.

	- Division: 가장 간단한 해시 함수로서 Key를 양의 정수(보통 해시테이블 크기)로 나눈 나머지를 주소로 사용하는 해시 함수이다.
				h(key) = key % size 와 같이 표현할 수 있는데, 이때 size가 소수(Prime number)이면 좋다.
				예를 들어, Key가 34343210, 53465434, 98603210 이고 해시테이블의 크기가 1000일 때, 해시값은 210, 434, 210 이 되어 210에서 충돌이 발생할 수 있다.
	
	- Folding: Key를 여러 부분으로 분할하여 이를 접어서 더하거나 XOR 해서 해시값을 산출하는 방법이다.
			   Folding은 Shift Folding과 Boundary Folding 으로 나뉜다.
				
			   Shift Folding 방법
			   Shift Folding은 숫자를 여러 부분으로 분할하여 분할된 수를 모두 더하는(혹은 덧셈 이외의 다른 계산 방식을 적용) 방법이다.
			   이는 마치 Key가 적힌 종이를 분할하여 찢은 후, 세로로 이동, 정렬하여 더하는 것과 비슷하다.
			   예를 들어, 123456789 라는 Key가 있을 때 이를 3부분으로 나누어 더하면 123 + 456 + 789 = 1368 이 해시값이 된다.

			   Boundary Folding 방법
			   Boundary Folding은 경계를 기준으로 분활된 부분을 교체해가며 역방향으로 수를 읽고 이들을 더하는(혹은 다른 계산법 적용) 방법이다.
			   이는 마치 Key가 적힌 종이를 경꼐를 기준으로 접었을 때, 분할된 부분의 숫자가 정방향, 역방향을 ㅗ교체하는 것과 비슷하다.
			   예를 들어, 123456789 라는 Key가 있을 때 이를 3부분으로 나누면, 123, 456, 789가 되는데, 첫번째 수는 정방향 123, 두번째 수는 역방향 654, 세번째 수는 정방향 789로 하여 이들을 모두 더해 123 + 654 + 789 = 1566 해시값을 산출한다.
			   또는, 역방향/정방향/역방향 방식으로 하여 321 + 456 + 987 = 1764 해시값을 구할 수도 있다.

	- Mid-Squared: Key값을 제곱한 후 중간의 몇자리를 선택하여 해시값으로 사용하는 방법이다.
				   예를 들어, Key가 1234 일 때, 키를 제곱하면 1234 * 1234 = 1522756 이 되고, 여기서 중간 3자리 227을 해시값으로 사용한다.

	- Radix Transformation: Key값을 다른 진법으로 변환하여 해시값으로 사용하는 방법이다.
							예를 들어, 10진법의 Key를 9진법이나 11진법으로 변환하여 해시값을 계산한다.
							Key가 1234 일 때, 이를 9진법으로 변환하면 1621 이 되고, 이를 해시값으로 사용한다.