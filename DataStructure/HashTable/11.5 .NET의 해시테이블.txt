11.5 .NET의 해시테이블

닷넷에서 해시테이블을 구현한 클래스로는 (1)Non-Generic 클래스인 Hashtable 클래스, (2)Generic 클래스인 Dictionary<TKey,TValue> 클래스, (3)멀티쓰레딩 환경에서 해시테이블을 보다 간편하게 사용할 수 있는 ConcurrentDictionary<TKey,TValue> 클래스 등이 있다.

Hashtable 클래스

Non-Generic 클래스인 Hashtable 클래스는 System.Collections 네임스페이스에 있는 클래스로서 Key와 Value 모두가 object 타입이고, Open Addressing 방식을 사용하는 해시테이블이다.
이 클래스는 해시 충돌 문제를 해결하기 위해 이중 해싱(Double Hashing) 방식을 사용한다.

일반적으로 Hashtable 클래스를 사용하는 대신 Generic 클래스인 Dictionary<TKey,TValue> 클래스를 사용할 것을 권장한다.

아래는 Hashtable 클래스를 사용한 예제이다.
해시테이블은 Key를 해싱하여 데이타를 저장하기 때문에, 전체 엔트리를 출력할 때 통상 입력된 순서와 무관하게 출력된다.

*HashTable.Example.cs Example2() 메서드 참조

Dictionary<TKey,TValue> 클래스

딕셔너리 클래스는 제네릭 방식으로 해시테이블을 구현한 클래스로서 키와 벨류 타입을 객체 생성시 사용자가 지정하게 된다.
딕셔너리 클래스는 System.Collection.Generic 네임스페이스 하에 있으며 체이닝 방식을 사용하는 해시테이블 클래스이다.

아래는 딕셔너리 클래스를 사용한 예제이다.

*HashTable.Example.cs Example3() 메서드 참조

ConcurrentDictionary<TKey,TValue> 클래스

닷넷 4.0 부터 멀티쓰레딩 환경에서 해시테이블을 보다 편리하게 사용할 수 있는 새로운 클래스인 콘커렌트 딕셔너리 클래스가 제공되었다.
콘커렌트 딕셔너리 클래스는 Thread-Safe한 컬렉션 클래스로서 System.Collections.Concurrent 네임스페이스 안에 있다.

멀티쓰레딩 환경에서 딕셔너리 클래스를 사용할 때는 데이타 핸들링시 Lock을 사용하여 멀티쓰레드의 동시 접근을 컨트롤해야 하는데 이 부분에서 개발자의 실수로 에러가 발생하는 경우가 종종 있다.
콘커렌트 딕셔너리 클래스는 이러한 락킹 부분을 내부적으로 처리해 주기 때문에 멀티쓰레딩 환경에서 해시테이블을 편리하게 사용할 수 있다.

콘커렌트 딕셔너리 클래스는 다양한 Try*() 메서드를 제공하고 있는데, 데이타를 추가하기 위한 TryAdd() 메서드, Key로부터 Value를 읽기 위한 TryGetValue() 메서드, Key와 연관된 Value를 갱신하기 위한 TryUpdate() 메서드, 특정 Key 엔트리를 삭제하기 위핸 TryRemove() 메서드 등이 있다.
아래는 이러한 메서드들을 사용한 에제이다.

*HashTable.Example.cs Example4() 메서드 참조

다음으로 멀티쓰레딩 환경에서 콘커렌트 딕셔너리 클래스를 사용하는 것을 예시하기 위해, 아래 예제는 2개의 쓰레드를 사용하여 콘커렌트 딕셔너리를 사용한 예를 선보인 것이다.
이 예제는 하나의 쓰레드가 콘커렌트 딕셔너리 해시테이블에 키가 1부터 100개까지인 엔트리를 꼐속 집어 넣을 때, 동시에 다른 쓰레드에서는 그 해시테이블에서 데이타를 읽어 오는 작업을 하고 있다.

*HashTable.Example.cs Example5() 메서드 참조