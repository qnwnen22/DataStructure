2.1 배열의 기초개념

배열은 연속적인 메모리 상에 동일한 데이타 타입의 요소들을 순차적으로 일렬로 저장하는 자료구조이다.
순차적으로 나열된 배열요소는 각 요소마다 인덱스를 붙이는데, 예를들어, 배열을 A라 했을 경우 첫번째 배열요소는 A[0], 두번째 배열요소는 A[1], 세번째 배열요소는 A[2] 등으로 배열 인덱스를 붙인다.

하나의 배열은 고정된 크기를 가지며, 배열 인덱스를 사용할 경우 각 배열요소를 즉시 엑세스할 수 있다.
예를 들어, 배열 A가 100개의 배열요소가 있을 때, A[0], A[50], A[99] 등을 엑세스하는 시간은 동일하며,모두 해당 요소를 즉시 엑세스하여 배열요소 값을 읽거나 쓸 수 있다.

배열은 거의 대부분의 프로래밍 언어에서 사용할 수 있는 가장 기초적인 자료구조로서, C# 프로그래밍 언어도 물론 배열을 기본적으로 지원한다.
(C/C++에서의 배열이 연속적인 메모리 공간에 대한 주소를 의미한다면, C#에서의 배열은 배열 객체로서 메모리상의 배열에 대한 정보를 가지며
 System.Array 클래스로부터 생성되어 System.Array 클래스의 속성과 메서드를 사용할 수 있는 객체 인스턴스이다.)
 
배열의 차원(Dimension)

배열의 차원(Dimension)이란 한 배열요소를 선택하기 위해 사용하는 인덱스의 수이다.

배열 A의 배열 요소가 10개이고 이를 메모리 상에 일렬로 저장하면 아래와 같이 표현할 수 있다.
각 요소는 0부터 시작하는 배열 인덱스를 갖는데, 예를 들어 배열 A의 첫번째 배열요소는 A[0] 이고, 두번째 요소는 A[1]으로 표현한다.
(주:이렇게 배열 인덱스가 0부터 시작하는 것을 Zero-based Indexing이라 부른다.
 인덱스는 0(Zero-based Indexing), 1(One-based Indexing), 또는 n(n-based Indexing) 부터 시작할 수 있는데,
 많은 프로그래밍 언어가 Zero-based Indexing을 사용한다)
 
					int[] A = new int[10];
	A[0] | A[1] | A[2] | A[3] | A[4] | A[6] | A[7] | A[8] | A[9]
	 15  |  2	|  8   |  19  |	 5	 |  20	|  9   |  32  |  4

위 그림과 같이, 한 줄로 쭉 연결된 배열을 1차원 배열이라 하며, 배열 요소를 선택할 때 1개의 인덱스만 필요하다.
반면, 2차원 배열은 아래 그림과 같이 행(row)과 열(column)을 갖는 배열을 의미하는데, 예를들어,
아래는 3개의 행과 4개의 열을 갖는 2차원 배열이며, 배열 요소를 선택하기 위해 행과 열 2개의 인덱스가 필요하다.

					int[,] A = new int[3,4];
				A[0,0] | A[0,1] | A[0,2] | A[0,3]
				A[1,0] | A[1,1] | A[1,2] | A[1,3]
				A[2,0] | A[2,0] | A[2,2] | A[2,3]

C#은 1차원 배열을 비롯한 2차원, 3차원, ... 32차원 배열까지 지원한다.