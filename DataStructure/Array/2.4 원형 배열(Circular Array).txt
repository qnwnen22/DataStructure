2.4 원형 배열(Circular Array)

원형 배열은 고정된 크기의 배열을 마치 양 끝이 연결된 것처럼 사용할 수 있게 한 자료구조로서, 흔히 원형 버퍼(Circular Buffer), 링 버퍼(Ring Buffer)라고도 불리운다.
즉, 배열의 크기가 N 일 때, 배열의 마지막 요소(N-1)에 도착하면, 다음 배열요소는 첫번째 요소(0)로 순환하는 구조이다.

원형 배열은 처음 들어간 데이타가 먼저 나오는 FIFO(First in first out) 구조의 데이타 버퍼에 적합하며, 비원형의 일반 배열은 마지막에 들어간 데이타가 먼저 나오는 LIFO(Last in first out) 구조의 버퍼에 적합하다.
원혁 배열은 FIFO구조를 가진 큐(Queue)를 구현하거나 데이타 스트림 버퍼 등을 구현할 때 흔히 사용되곤 한다.

아래 그림은 원형 배열의 구조를 표현한 것인데, 8개의 요소를 갖는 배열이 원형으로 순환하는 구조를 가지고 있다.

*이미지 참조

원형 배열에서 배열 자체는 고정된 크기를 갖는 일반 배열과 동일하지만, 이를 특별한 방식으로 사용하는 것이라고 할 수 있다.
원형배열은 배열을 순환하는 구조로 만들어야 하므로, 배열 인덱스를 증가시킬 때 mod연산자를 사용하여 마지막 배열의 다음 인덱스가 첫번째 인덱스로 돌아오게 한다.

C#에서 mod 연산자는 %로 표시되고 나머지를 구할 때 사용되는데, 예를 들어 10%8은 10을 8로 나눈 나머지 즉 2가된다.
이러한 mod연산자를 사용하여 원형배열의 인덱스 증가를 다음과 같이 표현할 수 있다.

	index = (index + 1) % A.Length;

위 표현식을 사용하여, A[7] 요소를 읽고 다음 요소로 이동한다면, (7 + 1) % 8 = 0 죽 A[0]배열 요소로 이동하게 된다.

원형 배열에 보다 익숙해 지기 위해 간단한 사례를 들어보자.
원형 탁자에 8명의 사람이 앉아 있다고 가정하자.
각 사람의 명칭은 위에서부터 시계 방향으로 a~h라고 가정하자.
이때, 임의의 사람을 선택해서 그 사람으로부터 시계 방향으로 모든 사람들의 명칭을 순서대로 출력하는 프로그램을 만들어 보자.

이 문제를 해결하는 간단한 방법은 abcdefgh 전체를 한번 더 추가해서 뒤에 붙이는 방식이다.
즉, abcdefghabcdefgh 와 같이 하면 임의의 시작 인덱스에서 부터 순서대로 8개를 읽으면 된다.
예를 들어 c로부터 시작한다면 ab_cdefghab_cdefgh 를 읽으면 된다.
그러나, 이러한 방식의 단점은 배열의 크기만큼 중복된 공간이 더 필요하고 현재의 배열을 중복 복사해야 한다는 점이다.
이러한 중복 복사 방식보다 더 효울적인 방식으로 원형 배열을 사용할 수 있다.
즉 배열에 a,b,c,d,e,f,g,h를 넣고 배열 인덱스를 순환하도록 조정하면, 임의의 인덱스에서 시작하여 N개를 순차적으로 출력할 수 있다.
아래 예제는 이를 구현한 샘플이다.

	char[] A= "abcdefgh".ToCharArray();
	int startIndex = 2;

	for(int i=0; i < A.Length; i++)
	{
		int index = (startIndex + i) % A.Length;
		Console.Write(A[index]);
	}